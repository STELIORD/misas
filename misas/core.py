# AUTOGENERATED! DO NOT EDIT! File to edit: 01_local_interpret.ipynb (unless otherwise specified).

__all__ = ['get_generic_series', 'plot_series', 'plot_frame', 'gif_series', 'eval_generic_series', 'rotationTransform',
           'get_rotation_series', 'eval_rotation_series', 'cropTransform', 'get_crop_series', 'eval_crop_series',
           'brightnessTransform', 'get_brightness_series', 'eval_bright_series', 'contrastTransform',
           'get_contrast_series', 'eval_contrast_series', 'zoomTransform', 'get_zoom_series', 'eval_zoom_series',
           'dihedralTransform', 'get_dihedral_series', 'eval_dihedral_series']

# Internal Cell
from fastai.vision import *
import pandas as pd
from tqdm.notebook import tqdm
import matplotlib.pyplot as plt
import gif
import math
import numpy as np

# Internal Cell
def dice_by_component(predictedMask, trueMask, component = 1):
    dice = Tensor([1])
    pred = predictedMask.data == component
    msk = trueMask.data == component
    intersect = pred&msk
    total = pred.sum() + msk.sum()
    if total > 0:
        dice = 2 * intersect.sum().float() / total
    return dice.item()

# Cell
def get_generic_series(image,
        model,
        transform_function,
        start=0,
        end=180,
        step=30,
        log_steps=False,
        prep_function=None
    ):
    series = []
    steps = np.arange(start,end,step,)
    if log_steps:
        steps = np.exp(np.linspace(log(start),log(end),int((end-start)/step)))
    for param in tqdm(steps, leave=False):
        img = image.clone()
        img = transform_function(img, param)
        if prep_function:
            img = prep_function(img)
        pred = model.predict(img)[0]
        series.append([param,img,pred])
    return series

# Cell
def plot_series(
        series,
        nrow=1,
        figsize=(16,6),
        param_name='param'
    ):
    fig, axs = plt.subplots(nrow,math.ceil(len(series)/nrow),figsize=figsize)
    for element, ax in zip(series, axs.flatten()):
        param,img,pred = element
        img.show(ax=ax, title=f'{param_name}={param:.2f}', y = pred)

# Cell
@gif.frame
def plot_frame(param, img, pred, param_name="param",**kwargs):
    img.show(title=f'{param_name}={param:.2f}', y = pred, **kwargs)

# Cell
def gif_series(series, fname, duration=150, param_name="param"):
    frames = [plot_frame(*x, param_name=param_name) for x in series]
    gif.save(frames, fname, duration=duration)

# Cell
def eval_generic_series(
        image,
        mask,
        model,
        transform_function,
        start=0,
        end=360,
        step=5,
        param_name="param",
        mask_transform_function=None,
        prep_function=None,
        components=['bg', 'c1','c2']
    ):
    results = list()
    for param in tqdm(np.arange(start, end, step), leave=False):
        img = image.clone()
        trueMask = mask.clone()
        img = transform_function(img, param)
        if mask_transform_function:
            trueMask = mask_transform_function(trueMask, param)
        if prep_function:
            img = prep_function(img)
            trueMask = prep_function(trueMask)
        prediction = model.predict(img)[0]
        # prediction._px = prediction._px.float()
        result = [param]
        for i in range(len(components)):
            result.append(dice_by_component(prediction, trueMask, component = i))
        results.append(result)

    results = pd.DataFrame(results,columns = [param_name, *components])
    return results

# Cell
def rotationTransform(image, deg):
    return image.rotate(degrees=int(deg))

def get_rotation_series(image, model, start=0, end=360, step=60, **kwargs):
    return get_generic_series(image,model,rotationTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_rotation_series(image, mask, model, step=5, start=0, end=360, **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        rotationTransform,
        start=start,
        end=end,
        step=step,
        mask_transform_function=rotationTransform,
        param_name="deg",
        **kwargs
    )

# Cell
def cropTransform(image, pxls):
    image.resize(256)
    image.crop(int(pxls))
    image.rotate(180)
    image.crop_pad(256,padding_mode='zeros')
    image.rotate(180)
    return image

def get_crop_series(image, model, start=56, end=256, step=50, **kwargs):
    return get_generic_series(image,model,cropTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_crop_series(image, mask, model, start=56, end=256,step=5,crop_mask=False,**kwargs):
    mask_transform_function = None
    if crop_mask:
        mask_transform_function = cropTransform
    return eval_generic_series(
        image,
        mask,
        model,
        cropTransform,
        start=start,
        end=end,
        step=step,
        param_name='pixels',
        mask_transform_function=mask_transform_function,
        **kwargs
    )

# Cell
def brightnessTransform(image, light):
    return image.brightness(light)

def get_brightness_series(image, model, start=0.05, end=0.95, step=.2, **kwargs):
    return get_generic_series(image,model,brightnessTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_bright_series(image, mask, model, start=0.05, end=0.95, step=0.05, param_name="brightness", **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        brightnessTransform,
        start=start,
        end=end,
        step=step,
        param_name=param_name,
        **kwargs
    )

# Cell
def contrastTransform(image, scale):
    return image.contrast(scale)

def get_contrast_series(image, model, start=0.1, end=7.00, step=1, **kwargs):
    return get_generic_series(image,model,contrastTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_contrast_series(image, mask, model, start=0.1, end=7.0, step=0.5, param_name="contrast", **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        contrastTransform,
        start=start,
        end=end,
        step=step,
        param_name=param_name,
        **kwargs
    )

# Cell
def zoomTransform(image, scale):
    return image.zoom(scale)

def get_zoom_series(image, model, start=1.00, end=3, step=.5, **kwargs):
    return get_generic_series(image,model,zoomTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_zoom_series(image, mask, model, start=1, end=3, step=.1, param_name="scale", **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        zoomTransform,
        start=start,
        end=end,
        step=step,
        param_name=param_name,
        mask_transform_function=zoomTransform,
        **kwargs
    )

# Cell
def dihedralTransform(image, sym_im):
    return image.dihedral(k=int(sym_im))

def get_dihedral_series(image, model, start=0, end=8, step=1, **kwargs):
    return get_generic_series(image,model,dihedralTransform, start=start, end=end, step=step, **kwargs)

# Cell
def eval_dihedral_series(image, mask, model, start=0, end=8, step=1, param_name="k", **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        dihedralTransform,
        start=start,
        end=end,
        step=step,
        param_name=param_name,
        mask_transform_function=dihedralTransform,
        **kwargs
    )