# AUTOGENERATED! DO NOT EDIT! File to edit: 04_mr_artifacts.ipynb (unless otherwise specified).

__all__ = ['spikeTransform', 'get_spike_series', 'eval_spike_series']

# Internal Cell
from torchio.transforms import RandomSpike

# Internal Cell
from fastai.vision import open_image, Image, open_mask
from .core import Fastai1_model, get_generic_series, plot_series, eval_generic_series
from functools import partial
import torch

# Cell
def spikeTransform(image, intensityFactor, spikePosition=[.1,.1]):
    data = image.data[0].unsqueeze(0)
    spikePosition = [[0.0] + spikePosition]
    spike = RandomSpike()
    data = spike.add_artifact(data, spikePosition, intensityFactor)[0]
    data = torch.stack((data,data,data))
    return Image(torch.clamp(data,0,1))

def get_spike_series(image, model, start=0, end=2.5, step=.5, spikePosition=[.1,.1], **kwargs):
    return get_generic_series(image,model,partial(spikeTransform,spikePosition=spikePosition), start=start, end=end, step=step, **kwargs)

# Cell
def eval_spike_series(image, mask, model, step=.1, start=0, end=2.5, spikePosition=[.1,.1], **kwargs):
    return eval_generic_series(
        image,
        mask,
        model,
        partial(spikeTransform,spikePosition=spikePosition),
        start=start,
        end=end,
        step=step,
        mask_transform_function=None,
        param_name="intensity",
        **kwargs
    )